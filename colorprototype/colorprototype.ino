/*
  Color picker prototype

  Finds a the color of an object passed by the sensor and compares it to an array of correct colors
  Feedback is displated on an LCD panel and audio is piped out of pin D3

  Written by Jack Eller for Escape Reality Games

*/


/*
   PINS    :
    - Green-White      = SDA        [ A4 ]
    - Blue-White       = SLC / CLK  [ A5 ]
*/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "Adafruit_TCS34725.h"
#include "talkie.h"
#include "Volume3.h"




#define speakerPin 9

Talkie voice;
LiquidCrystal_I2C lcd(0x3F, 20, 4); // set the LCD address to 0x27 for a 16 chars and 2 line display
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_700MS, TCS34725_GAIN_1X);
byte gammatable[256];
String color = "";
String change;

void R2D2() {
  int beeps[] = {1933, 2156, 1863, 1505, 1816, 1933, 1729, 2291};
  int buzzVols[] = {144, 180, 216, 252, 252, 252, 252, 216, 180, 144};

  int i = 9;
  while (i >= 0) {
    vol.tone(speakerPin, 1050, buzzVols[i] * 4);
    delayMicroseconds(20 * 64);
    vol.tone(speakerPin, 1050, buzzVols[i] / 8 * 4);
    delayMicroseconds(40 * 64);
    i--;
  }

  delay(35);

  i = 0;
  while (i < 8) {
    int v = 0;
    while (v < 250) { // 12.5 mS fade up time
      vol.tone(speakerPin, beeps[i], v * 4);
      v += 10;
      delayMicroseconds(2 * 64);
    }
    delay(20);
    v = 250;
    while (v > 0) { // 12.5 mS fade down time
      vol.tone(speakerPin, beeps[i], v * 4);
      v -= 10;
      delayMicroseconds(5 * 64);
    }
    vol.noTone();
    delay(25);
    i++;
  }

  int f = 2466;
  while (f < 2825) {
    vol.tone(speakerPin, f, 1023);
    f += 3;
    delay(1);
  }
  f = 2825;
  int v = 255;
  while (f > 2000) {
    vol.tone(speakerPin, f, v * 4);
    f -= 6;
    v -= 1;
    delay(1);
  }
  vol.noTone();
  delay(35);

  i = 10;
  while (i > 0) {
    vol.tone(speakerPin, 1050, buzzVols[i] * 4);
    delayMicroseconds(20 * 64);
    vol.tone(speakerPin, 1050, buzzVols[i] / 8 * 4);
    delayMicroseconds(40 * 64);
    i--;
  }
  vol.noTone();
}

const uint8_t spHURRY[] PROGMEM = {0x00, 0x00, 0x14, 0xE0, 0x40, 0x4B, 0xEC, 0x16, 0x19, 0x95, 0xD8, 0x3B, 0x19, 0x89, 0xCE, 0x8D, 0xF1, 0xEC, 0xB6, 0x25, 0xBA, 0x26, 0xC5, 0x61, 0x97, 0x99, 0xD4, 0xB4, 0xE5, 0xBA, 0xA9, 0x55, 0x49, 0xDE, 0x5E, 0xAC, 0xBA, 0x45, 0x67, 0x8C, 0x78, 0xB3, 0xEB, 0xDD, 0xCC, 0xB6, 0xB5, 0xB5, 0x18, 0x72, 0xE4, 0x9D, 0xDA, 0xFA, 0x4E, 0xB7, 0x00, 0x0F, 0x00, 0x00};
const uint8_t spMACHINE[] PROGMEM = {0xC2, 0x56, 0x3C, 0x7D, 0xDC, 0x12, 0xDB, 0x3E, 0x8C, 0x89, 0xBA, 0x4C, 0x4A, 0x96, 0xD3, 0x75, 0x95, 0x12, 0x6E, 0xBD, 0x6F, 0xB7, 0xBA, 0x16, 0x5A, 0x58, 0x3D, 0xB3, 0x03, 0xA6, 0x14, 0x76, 0xC0, 0xCC, 0x37, 0x11, 0xC8, 0x40, 0x04, 0x22, 0xB0, 0x92, 0xD9, 0x9A, 0xC1, 0x7D, 0xF5, 0xCD, 0x6F, 0x3E, 0x8A, 0x39, 0x14, 0xA5, 0x72, 0xD4, 0x28, 0x67, 0x56, 0xD4, 0x89, 0xD2, 0xB3, 0xE9, 0x63, 0x5D, 0xD2, 0xDA, 0x03, 0x49, 0xA9, 0xDB, 0xCD, 0x47, 0x3C, 0xE3, 0xEB, 0xBF, 0xF4, 0x75, 0x57, 0xEC, 0xEE, 0x9B, 0xF2, 0x9B, 0xBE, 0x56, 0x34, 0xCC, 0xA2, 0xF2, 0xFF, 0x03};
const uint8_t spE[] PROGMEM = {0x21, 0x3A, 0x4A, 0x41, 0x77, 0x63, 0xCF, 0x68, 0x27, 0x3B, 0x1D, 0xC5, 0x6A, 0x4A, 0x38, 0x55, 0x7B, 0x16, 0xB3, 0x2E, 0xED, 0xAA, 0x42, 0x78, 0x15, 0xB5, 0xB6, 0xA5, 0x9F, 0x19, 0xD9, 0x2F, 0xE3, 0xD4, 0x3E, 0x0F, 0x69, 0x98, 0x01, 0xD9, 0x2F, 0xE3, 0xE4, 0xE1, 0xFF, 0x09, 0x61, 0x41, 0x51};
const uint8_t spD[] PROGMEM = {0x0C, 0xB8, 0xD0, 0x64, 0x64, 0x0F, 0x15, 0x8B, 0x5A, 0xE8, 0x15, 0x6C, 0xE1, 0xA0, 0x39, 0x8B, 0x8E, 0xFB, 0x4C, 0x00, 0x57, 0x2F, 0x3A, 0xEE, 0x75, 0x09, 0x5C, 0x33, 0xEB, 0xF8, 0xC7, 0x3A, 0x70, 0xEF, 0xEC, 0x13, 0x6D, 0xEB, 0x20, 0xB3, 0xB5, 0x46, 0x32, 0x2D, 0x43, 0xF6, 0xC4, 0x1E, 0xC5, 0x8A, 0x0A, 0x3A, 0x13, 0xBB, 0x55, 0xDB, 0x3B, 0x70, 0x4F, 0xE5, 0xD6, 0xEC, 0x68, 0xC0, 0xBD, 0x95, 0x7B, 0x97, 0x87, 0x38, 0xFD, 0x41, 0x15, 0x41, 0x11};
const uint8_t spN[] PROGMEM = {0x27, 0x9E, 0x71, 0x99, 0x3D, 0x16, 0x9D, 0x68, 0xBA, 0x22, 0xCB, 0xAC, 0x75, 0xA2, 0xE9, 0x92, 0x22, 0x73, 0xD6, 0x89, 0xA6, 0x2F, 0xF2, 0xC8, 0x59, 0x27, 0x59, 0x61, 0x55, 0x4D, 0x6A, 0x9D, 0x7C, 0xBB, 0x52, 0x0D, 0xAD, 0x35, 0xAA, 0xAE, 0x9D, 0x5A, 0x3C, 0x76, 0xAB, 0xBB, 0x72, 0x1A, 0x0E, 0x3B, 0xA5, 0xED, 0x2A, 0x68, 0x30, 0x9D, 0x96, 0xBE, 0x69, 0xE7, 0xC1, 0x54, 0x53, 0x87, 0x3A, 0xD4, 0xA1, 0x0C, 0x4D, 0xBB, 0x14, 0xBA, 0xDB, 0x34, 0x14, 0x1F, 0x62, 0x16, 0xB1, 0x42, 0x57, 0x8C, 0x49, 0x8A, 0xC5, 0xFC, 0x51, 0x59, 0x41, 0x39};
const uint8_t spO[] PROGMEM = {0x2B, 0xC9, 0x21, 0xCD, 0x2C, 0x1F, 0xEE, 0xE4, 0xA4, 0xC5, 0x54, 0x9A, 0xE9, 0xA6, 0x9B, 0xAE, 0x2C, 0xBB, 0x4A, 0x55, 0xDB, 0xB4, 0xB3, 0x95, 0xA7, 0xD4, 0x2E, 0xEA, 0xAB, 0x67, 0xDE, 0xF2, 0x68, 0xC7, 0x4D, 0x74, 0x63, 0x29, 0x82, 0x5E, 0x4F, 0xD4, 0x9D, 0xB9, 0x08, 0x95, 0xB1, 0xE7, 0x2E, 0xB6, 0xD1, 0x57, 0xA6, 0x52, 0x69, 0xD4, 0xB5, 0x16, 0xAA, 0xCA, 0xB7, 0x54, 0xE1, 0x1C, 0xFD, 0x69, 0x61, 0x79, 0x19, 0x61, 0x72, 0x79};
const uint8_t spR[] PROGMEM = {0x23, 0x2C, 0xEE, 0x2A, 0x8C, 0x57, 0xAE, 0x28, 0xC7, 0x4F, 0x33, 0x5D, 0xB8, 0xB2, 0xEC, 0xAF, 0xD2, 0x78, 0xD5, 0xCE, 0x46, 0x53, 0xCC, 0x74, 0x25, 0x6E, 0xEE, 0x7D, 0x19, 0xAA, 0xDA, 0xF1, 0xC4, 0xCD, 0x7D, 0xE8, 0x73, 0x9F, 0xFB, 0x5C, 0x86, 0xA2, 0x7F, 0x2C, 0x79, 0x55, 0x1D, 0xD2, 0x98, 0xE6, 0xA6, 0xAB, 0x8D, 0xCE, 0xE3, 0xFF, 0x11, 0x51, 0x25};
const uint8_t spT[] PROGMEM = {0x0E, 0x38, 0xC2, 0xD4, 0x00, 0x57, 0xB5, 0x36, 0x77, 0x29, 0x26, 0xCF, 0xB6, 0xBD, 0xBC, 0xE5, 0x0C, 0xA4, 0xA7, 0xF6, 0xF2, 0x97, 0x53, 0xB0, 0xD9, 0xC6, 0x3B, 0x5C, 0xC9, 0x76, 0x0A, 0x32, 0x5B, 0x7B, 0x66, 0xA3, 0xDC, 0x41, 0x50, 0x7A, 0x6A, 0xB7, 0x66, 0x27, 0x45, 0xDA, 0x89, 0x53, 0xFA, 0x95, 0x18, 0x79, 0x27, 0x4E, 0x19, 0x56, 0x20, 0x94, 0xEB, 0x3A, 0x75, 0x4C, 0xE3, 0x74, 0x48, 0xFE, 0x15, 0x27, 0x8E, 0x71, 0x74, 0xE3, 0xF0, 0x20, 0x3D, 0x15, 0xC5, 0x0D, 0xCD, 0xA0, 0x6E, 0x8F, 0xED, 0xFF, 0x39, 0x51, 0x15};
const uint8_t spGOOD_WORK[] PROGMEM = {0xA1, 0x89, 0xC6, 0x95, 0xC3, 0xF2, 0xCD, 0xEA, 0x14, 0x4E, 0xA7, 0xA6, 0x4B, 0xFB, 0x5B, 0xEC, 0xE2, 0x16, 0x0A, 0x00, 0x57, 0x33, 0xB4, 0xD6, 0x58, 0xA8, 0x4F, 0x03, 0x10, 0x85, 0x08, 0xDE, 0x0E, 0x92, 0xDA, 0xE7, 0x21, 0x21, 0x37, 0x4B, 0x24, 0x32, 0xA6, 0x88, 0x5C, 0x77, 0xD7, 0xF4, 0x58, 0x42, 0x31, 0x52, 0x3A, 0x28, 0x53, 0x8D, 0x46, 0x62, 0x5A, 0x52, 0x1C, 0xE6, 0xED, 0x75, 0x1F, 0xF2, 0xA8, 0x27, 0x00, 0x01, 0xC4, 0xE2, 0x22, 0x01, 0x02, 0x94, 0xEC, 0xF2};
const uint8_t spREADY_TO_START[] PROGMEM = {0xAE, 0x91, 0x85, 0xD3, 0x32, 0xB8, 0xB5, 0xC6, 0x35, 0x4E, 0x09, 0xCA, 0x7E, 0x6A, 0xDF, 0xB9, 0xCC, 0xB4, 0xFB, 0xA9, 0xE2, 0xD4, 0x30, 0xD5, 0xEE, 0xB7, 0x5A, 0x55, 0xEA, 0x5A, 0x10, 0x99, 0xA5, 0x55, 0x31, 0x1B, 0x1B, 0x4E, 0xA6, 0x55, 0xE5, 0xAE, 0xCA, 0xD2, 0x9D, 0x5A, 0x55, 0xA6, 0x08, 0x49, 0x2D, 0x8D, 0xB5, 0x6C, 0x11, 0xB0, 0x54, 0x9A, 0x06, 0x0C, 0xB0, 0x8C, 0x45, 0x29, 0xBC, 0x4A, 0x53, 0xCB, 0x4E, 0xA5, 0xA9, 0xC2, 0x4C, 0xD5, 0xF2, 0x1A, 0xA0, 0x03, 0x35, 0x05, 0xFC, 0xA9, 0x6C, 0x01, 0x05, 0xFC, 0x1D, 0x0C, 0x10, 0x80, 0xA6, 0xD2, 0x4F, 0x1E, 0x43, 0x44, 0x86, 0xB4, 0xBD, 0xC5, 0xAD, 0x4E, 0xE5, 0x8B, 0x77, 0x18, 0x37, 0x59, 0x85, 0x9F, 0xE6, 0xA5, 0xBA, 0x78, 0x67, 0x33, 0x6D, 0x91, 0x9F, 0x22, 0x1D, 0xE6, 0xD0, 0x45, 0xDA, 0x49, 0x46, 0xB8, 0x2C, 0x00, 0x03, 0x64, 0x19, 0xCA, 0x80, 0x26, 0x9B, 0x11, 0xE0, 0x12, 0x33, 0x00, 0xC0, 0x03, 0x00, 0x00};
const uint8_t spNEED[] PROGMEM = {0xA1, 0x0B, 0x0E, 0x3C, 0xDB, 0xA2, 0xE4, 0xA6, 0x54, 0xDE, 0x42, 0x54, 0x59, 0xE4, 0x55, 0x55, 0xA5, 0x42, 0x1D, 0x8D, 0x4F, 0xD1, 0x04, 0xAB, 0x7E, 0x87, 0xEA, 0xD9, 0xCC, 0x66, 0x36, 0x8B, 0x51, 0xB5, 0xA0, 0x44, 0x5B, 0x93, 0x57, 0xBD, 0x4A, 0x28, 0x58, 0x3C, 0x5D, 0xCD, 0x6C, 0xAE, 0xA0, 0xF1, 0x74, 0x76, 0xB3, 0x2F, 0x7D, 0x2F, 0x2A, 0x10, 0x79, 0xA7, 0xF5, 0xAD, 0x88, 0x50, 0xC4, 0x62, 0x31, 0x44, 0x2F, 0x24, 0x11, 0x8B, 0xD8, 0x40, 0x95, 0x57, 0xA4, 0x3B, 0xE1, 0x83, 0x1B, 0x52, 0x32, 0x15, 0xF1, 0x45, 0x7E, 0xF0, 0xE3, 0x03, 0x00, 0x00};
const uint8_t spI[]             PROGMEM = {0xAA, 0x8D, 0x63, 0xA8, 0xAA, 0x66, 0xAD, 0xB9, 0xA8, 0xCB, 0x08, 0xDD, 0x7C, 0xFB, 0x5B, 0xDF, 0xFA, 0x36, 0xB7, 0x39, 0x6D, 0xB5, 0xA3, 0x15, 0xBA, 0xF8, 0x76, 0xBB, 0xDF, 0xD3, 0x9E, 0xD7, 0xDA, 0x5C, 0x49, 0xA5, 0x2D, 0xDE, 0x7B, 0xDB, 0x6B, 0x76, 0x29, 0xAF, 0xC7, 0x6D, 0xEF, 0x31, 0xD8, 0x5C, 0x1E, 0xF7, 0xBD, 0x1E, 0xF5, 0x48, 0xE7, 0x28, 0x89, 0xE2, 0xF2, 0x38, 0x5F, 0xF9, 0xFE, 0x7F};
const uint8_t spMORE[] PROGMEM = {0xA1, 0x4D, 0x1E, 0xC6, 0x94, 0xE5, 0x85, 0x36, 0x58, 0x68, 0x57, 0x91, 0xD7, 0xEB, 0x54, 0xB1, 0xDB, 0xC6, 0x34, 0x75, 0x72, 0x15, 0x2A, 0x76, 0xB3, 0x80, 0x3F, 0x49, 0xAC, 0x52, 0xC5, 0x47, 0x1D, 0xA3, 0xB7, 0x6D, 0xB5, 0xC8, 0x39, 0x29, 0xEC, 0x7E, 0x34, 0x3A, 0x7B, 0x95, 0xB3, 0xF2, 0xD2, 0xA9, 0x29, 0xB9, 0xA2, 0x59, 0xF3, 0x90, 0x06, 0xB3, 0xC4, 0xD7, 0x24, 0x8F, 0x1B, 0xF5, 0x10, 0x7B, 0x4E, 0x4D, 0x61, 0xB0, 0x5D, 0x64, 0xCD, 0x55, 0x9B, 0x3E, 0x2C, 0xE2, 0xD0, 0xD0, 0xFC};
const uint8_t spPLEASE[] PROGMEM = {0x0E, 0xC8, 0x81, 0xD4, 0x01, 0x59, 0x9B, 0x8F, 0xB0, 0x48, 0x69, 0x57, 0x73, 0x3B, 0xD2, 0x24, 0x2D, 0x3D, 0x24, 0xCD, 0x4A, 0xBD, 0x33, 0x8F, 0xF0, 0xC7, 0x3B, 0x6B, 0x79, 0x4D, 0x86, 0x9C, 0xFE, 0x64, 0x56, 0xA3, 0xAA, 0x59, 0x89, 0x3D, 0xBE, 0xCC, 0xA6, 0xB7, 0xA5, 0xCF, 0x9D, 0x85, 0xA5, 0xDE, 0xE6, 0x3E, 0xF5, 0x29, 0xB1, 0x98, 0xC5, 0xE3, 0xD2, 0x07, 0x13, 0x10, 0x56, 0x1D, 0xCB, 0xF0, 0x35, 0x87, 0x51, 0xAE, 0x75, 0xC0, 0x04, 0xAC, 0x06, 0xF8, 0x46, 0xCD, 0x00, 0x3F, 0x1A, 0x19, 0xE0, 0x7B, 0x0B, 0x01, 0x7C, 0xA7, 0xF6};
const uint8_t spGIVE[] PROGMEM = {0x6A, 0x60, 0x22, 0x3A, 0xD3, 0x64, 0xA7, 0x6E, 0x16, 0x37, 0xA0, 0x5A, 0x5B, 0xBB, 0xD1, 0x8D, 0x56, 0x09, 0x4C, 0xDB, 0x77, 0x3F, 0xFA, 0xDA, 0x82, 0xC5, 0xE9, 0x7B, 0xEF, 0x47, 0x17, 0x92, 0x9B, 0x06, 0x7F, 0x1B, 0x6D, 0x8A, 0x12, 0x11, 0xB2, 0x7D, 0x35, 0x3E, 0x68, 0xB9, 0xD9, 0x9B, 0x51, 0xEB, 0xE8, 0xE3, 0x5A, 0xAD, 0x4A, 0xA5, 0x82, 0xAD, 0x4B, 0x36, 0x70, 0x95, 0x8C, 0xD6, 0xC2, 0xD5, 0xCA, 0x65, 0x46, 0x98, 0x15, 0xBB, 0x5B, 0x04, 0x18, 0x29, 0xC2, 0x80, 0x14, 0x54, 0x10, 0xA0, 0x43, 0x2A, 0x3C};
const uint8_t spME[] PROGMEM = {0xAC, 0x53, 0x96, 0xB2, 0x53, 0x33, 0x9B, 0x36, 0x0F, 0x30, 0x35, 0xAE, 0xDF, 0xDB, 0x59, 0xAF, 0xAA, 0xF7, 0x52, 0x60, 0x79, 0xBB, 0xAB, 0x59, 0xF5, 0xAA, 0xB7, 0xBD, 0xAD, 0x6D, 0x69, 0x5B, 0x0B, 0x06, 0xF3, 0x27, 0xA5, 0xAD, 0x45, 0x48, 0xB2, 0x26, 0x87, 0x3E, 0x7A, 0xF0, 0xEC, 0x36, 0x6C, 0xFA, 0x60, 0xC1, 0xB3, 0x52, 0x32, 0xEB, 0x53, 0x42, 0x66, 0x6D, 0x39, 0x0F, 0x00, 0x00};
const uint8_t spPOWER[] PROGMEM = {0x0C, 0xF0, 0xDC, 0x4C, 0x03, 0x2B, 0xCD, 0x36, 0xAB, 0x85, 0x1B, 0x9F, 0xBC, 0xB1, 0xAE, 0x6A, 0xEA, 0x7A, 0xB3, 0x95, 0x15, 0xD5, 0x39, 0x85, 0x5D, 0x46, 0x96, 0x7C, 0x57, 0x3B, 0xB6, 0x19, 0x79, 0x30, 0x93, 0x55, 0xA4, 0xBB, 0xD4, 0x2E, 0xAD, 0x79, 0xB1, 0xDE, 0x3E, 0x8D, 0x29, 0x85, 0x61, 0x1F, 0xF6, 0x3B, 0xB7, 0x7E, 0x94, 0x33, 0x97, 0x46, 0x5B, 0xCE, 0x9D, 0x9F, 0xF0, 0x16, 0x3F, 0x48, 0xE7, 0x7E, 0xC3, 0x5B, 0xE3, 0xA2, 0xAC, 0xEB, 0xF6, 0xDF, 0xFF, 0x03};
const uint8_t spCOLOR[] PROGMEM = {0x0E, 0x88, 0xC7, 0x35, 0x00, 0x31, 0x15, 0x7B, 0x40, 0x03, 0x27, 0xF6, 0xAE, 0xDA, 0x4D, 0xB2, 0xDD, 0x78, 0xC4, 0xDA, 0x7D, 0xB1, 0xF2, 0xEA, 0x9E, 0xE4, 0xAC, 0x17, 0xAB, 0x72, 0x31, 0x83, 0x8B, 0xDB, 0xEE, 0x66, 0x76, 0xA9, 0xB7, 0x4D, 0x2D, 0x9B, 0xB6, 0xC4, 0x41, 0x0F, 0x7A, 0x94, 0xC3, 0x03, 0x00, 0x00};
const uint8_t spCOMPUTER[] PROGMEM = {0x0A, 0x08, 0x79, 0xC4, 0x02, 0xA7, 0x8A, 0xCE, 0xD3, 0x03, 0xDA, 0xEE, 0xAA, 0xD7, 0xA5, 0xB6, 0x59, 0x4A, 0x85, 0xD2, 0xD8, 0x16, 0x8F, 0x02, 0x60, 0x21, 0x32, 0x00, 0x29, 0x2B, 0x5A, 0xE0, 0x24, 0x25, 0x85, 0x82, 0x5B, 0x9F, 0x9D, 0xAC, 0x34, 0x38, 0x4B, 0xB1, 0xC8, 0x33, 0x33, 0x07, 0x74, 0x1D, 0x91, 0x2A, 0xDF, 0x34, 0xA9, 0xAD, 0xED, 0xAC, 0x66, 0x3B, 0xFB, 0xD6, 0xBB, 0xA6, 0xAA, 0x1B, 0xE9, 0xC3, 0x60, 0x3B, 0xFB, 0x14, 0xA5, 0x76, 0x83, 0xAD, 0xE4, 0xE9, 0xE6, 0xDA, 0x0C, 0x21, 0x5A, 0x92, 0x7A, 0xAA, 0x07};
const uint8_t spCONNECTED[] PROGMEM = {0x0E, 0x88, 0xC7, 0x35, 0x00, 0x31, 0x15, 0x7B, 0x20, 0x24, 0xB1, 0x78, 0x5A, 0xD8, 0x92, 0x9B, 0x9F, 0xDC, 0xE7, 0x70, 0x53, 0x9F, 0x93, 0x72, 0xEF, 0x5D, 0x1D, 0x2D, 0x6D, 0x2F, 0x4E, 0x96, 0x72, 0x84, 0x43, 0xD5, 0x39, 0x69, 0x6E, 0x91, 0x86, 0xDD, 0x66, 0xA4, 0x69, 0x59, 0x90, 0x8F, 0xEB, 0x94, 0x45, 0xED, 0xAA, 0x62, 0x4A, 0x78, 0x0D, 0x00, 0x0A, 0x90, 0x41, 0xA3, 0x65, 0x25, 0x9A, 0xA3, 0xEB, 0xB6, 0x59, 0xEC, 0xAA, 0xB6, 0xA2, 0x17, 0x26, 0x2C, 0xC3, 0x33, 0xC6, 0xDE, 0xF6, 0xAA, 0x57, 0xD2, 0x2D, 0x3D, 0x1D, 0xBA, 0xA6, 0x44, 0x15, 0x16, 0xC9, 0xAC, 0xFA, 0x18, 0x45, 0x94, 0xA2, 0x26, 0xC0, 0x03, 0x00, 0x00};
const uint8_t spTO[] PROGMEM = {0x02, 0xD8, 0x51, 0x3C, 0x00, 0xC7, 0x7A, 0x18, 0x20, 0x85, 0xE2, 0xE5, 0x16, 0x61, 0x45, 0x65, 0xD9, 0x6F, 0xBC, 0xE3, 0x99, 0xB4, 0x34, 0x51, 0x6B, 0x49, 0xC9, 0xDE, 0xAB, 0x56, 0x3B, 0x11, 0xA9, 0x2E, 0xD9, 0x73, 0xEB, 0x7A, 0x69, 0x2A, 0xCD, 0xB5, 0x9B, 0x1A, 0x58, 0x2A, 0x73, 0xF3, 0xCD, 0x6A, 0x90, 0x62, 0x8A, 0xD3, 0xD3, 0xAA, 0x41, 0xF1, 0x4E, 0x77, 0x75, 0xF2};
const uint8_t spENTER[] PROGMEM = {0xA7, 0x28, 0x39, 0x4C, 0x43, 0xEF, 0x9C, 0xA2, 0x94, 0x34, 0x31, 0x7D, 0x72, 0xF2, 0xD2, 0xD4, 0x8D, 0xBD, 0xC9, 0xCD, 0x52, 0xCE, 0xBC, 0x77, 0xE8, 0x99, 0xCA, 0x85, 0x03, 0x4A, 0x70, 0x77, 0x40, 0xE3, 0xE2, 0xA3, 0xF0, 0x53, 0xD4, 0x9D, 0xD7, 0xCE, 0xB6, 0xF7, 0x61, 0x34, 0x1D, 0xAA, 0xC2, 0x16, 0x99, 0xC9, 0x74, 0xD6, 0xF6, 0x88, 0xAD, 0x26, 0x9D, 0xD8, 0xC6, 0x5D, 0xF1, 0x03, 0x00, 0x00};
const uint8_t spCORRECT[] PROGMEM = {0x0E, 0x70, 0xC7, 0x49, 0x00, 0x3E, 0x86, 0xA5, 0x58, 0x8D, 0x2C, 0x53, 0xCD, 0x76, 0x8B, 0x56, 0x98, 0x23, 0x95, 0xA2, 0x99, 0x6B, 0x95, 0x9B, 0xDA, 0xAC, 0xCA, 0x27, 0x6D, 0xF1, 0x8D, 0xBD, 0xAB, 0x59, 0xF7, 0x26, 0xB5, 0xBE, 0x73, 0x79, 0x4D, 0x90, 0xDC, 0xB9, 0x21, 0x0C, 0x28, 0x8F, 0x91, 0x29, 0x47, 0x00, 0x00, 0x01, 0x0C, 0xED, 0xAA, 0x80, 0xE5, 0xA2, 0x05, 0xD0, 0x74, 0x3B, 0x02, 0xBC, 0x4B, 0x7A, 0x00, 0x00};
const uint8_t spIN[] PROGMEM = {0xAB, 0x2A, 0xD1, 0xC4, 0xA2, 0x2F, 0x9D, 0xA2, 0x79, 0x17, 0x8D, 0x78, 0x78, 0x8A, 0x92, 0x4C, 0xCC, 0xFA, 0xE6, 0x29, 0x4A, 0x36, 0x53, 0xAB, 0xB9, 0xB7, 0xDA, 0xD5, 0xA9, 0x62, 0xB0, 0x30, 0x8F, 0x29, 0xA3, 0x8E, 0x5E, 0x23, 0x5C, 0x66, 0x87, 0x3A, 0x05, 0x18, 0x49, 0xD7, 0x18, 0xEB, 0x58, 0xBB, 0xDA, 0x5B, 0x58, 0x4B, 0x73, 0xE4, 0x1B, 0xDD, 0x88, 0x46, 0x29, 0xC9, 0xB2, 0x74, 0x4C, 0xDB, 0x07};
const uint8_t spPUT[] PROGMEM = {0x0A, 0x30, 0x3E, 0x55, 0x02, 0x1C, 0x20, 0x80, 0x0A, 0x65, 0x27, 0xF2, 0x3A, 0xB2, 0xC4, 0x96, 0xDD, 0x74, 0x65, 0x26, 0x94, 0xB9, 0xF5, 0x9C, 0x55, 0x58, 0x1F, 0xEE, 0xDA, 0x6D, 0x4A, 0x65, 0xBD, 0x87, 0x7A, 0x6D, 0x04, 0x00, 0x07, 0x0C, 0xE3, 0x61, 0x80, 0x69, 0xC2, 0x18, 0x10, 0x5C, 0x32, 0xC0, 0x03};
const uint8_t spUNIT[] PROGMEM = {0x61, 0xB9, 0x96, 0x84, 0xB9, 0x56, 0xE5, 0xB9, 0xCE, 0x63, 0xDE, 0xCE, 0x0D, 0x30, 0x36, 0x9F, 0x6E, 0x86, 0x36, 0x60, 0xE9, 0x7B, 0xCA, 0x5E, 0x93, 0x45, 0xA4, 0xEB, 0xC9, 0xBB, 0x77, 0x72, 0xE7, 0x2D, 0x2B, 0xAB, 0xD6, 0x24, 0x94, 0x17, 0x8F, 0xA2, 0x79, 0x4C, 0xD5, 0x48, 0x5D, 0xAA, 0xEE, 0x21, 0x23, 0x42, 0xF1, 0x1A, 0x66, 0x54, 0x15, 0x97, 0xD6, 0x6B, 0x19, 0xD1, 0xC5, 0xC5, 0x77, 0xEF, 0xB3, 0x9F, 0x7E, 0x47, 0xA0, 0x08, 0xE5, 0x2E, 0x22, 0x1B, 0x00, 0x01, 0xCB, 0xBB, 0x3B, 0xE0, 0xD7, 0x0A, 0x05, 0x9C, 0xD0, 0x4D, 0x80, 0xE6, 0x92, 0xFE, 0x1F};
const uint8_t sp_ED[] PROGMEM = {0x69, 0x2C, 0x8E, 0xCA, 0x33, 0x16, 0xB9, 0xA9, 0x58, 0xAA, 0xC8, 0x6A, 0x28, 0x96, 0x2C, 0x45, 0xC3, 0xB3, 0x31, 0x99, 0x84, 0x72, 0x77, 0x11, 0xD9, 0xE0, 0xA6, 0x6D, 0xDC, 0xC5, 0xD4, 0x4D, 0x1A, 0x9A, 0x17, 0x77, 0x73, 0xDB, 0xFF, 0x71, 0x39, 0x49, 0x5A};
const uint8_t sp_S[] PROGMEM = {0x04, 0xF8, 0xD4, 0x5D, 0x00, 0x8F, 0xB9, 0x0B, 0xE0, 0x4B, 0x33, 0x06, 0x7C, 0xE6, 0xC5, 0x80, 0xCF, 0xD5, 0x09, 0xF0, 0x0D, 0x0A, 0x02, 0xBE, 0x12, 0x43, 0xC0, 0x55, 0x6C, 0xFF, 0x39, 0x51, 0x51, 0x15, 0x5A};

void thumbsup() {
  const byte thumb1[8] PROGMEM = {B00100, B00011, B00100, B00011, B00100, B00011, B00010, B00001};
  const byte thumb2[8] PROGMEM = {B00000, B00000, B00000, B00000, B00000, B00000, B00000, B00011};
  const byte thumb3[8] PROGMEM = {B00000, B00000, B00000, B00000, B00000, B00000, B00001, B11110};
  const byte thumb4[8] PROGMEM = {B00000, B01100, B10010, B10010, B10001, B01000, B11110, B00000};
  const byte thumb5[8] PROGMEM = {B00010, B00010, B00010, B00010, B00010, B01110, B10000, B00000};
  const byte thumb6[8] PROGMEM = {B00000, B00000, B00000, B00000, B00000, B10000, B01000, B00110};
  lcd.createChar(0, thumb1);
  lcd.createChar(1, thumb2);
  lcd.createChar(2, thumb3);
  lcd.createChar(3, thumb4);
  lcd.createChar(4, thumb5);
  lcd.createChar(5, thumb6);
  lcd.setCursor(4, 1);
  lcd.write(0);
  lcd.setCursor(4, 0);
  lcd.write(1);
  lcd.setCursor(5, 1);
  lcd.write(2);
  lcd.setCursor(5, 0);
  lcd.write(3);
  lcd.setCursor(6, 1);
  lcd.write(4);
  lcd.setCursor(6, 0);
  lcd.write(5);
  delay(500);
}



void thumbdown() {
  const byte thumb1[8] PROGMEM = {B00001, B00010, B00011, B00100, B00011, B00100, B00011, B00100};
  const byte thumb2[8] PROGMEM = {B00011, B00000, B00000, B00000, B00000, B00000, B00000, B00000};
  const byte thumb3[8] PROGMEM = {B11110, B00001, B00000, B00000, B00000, B00000, B00000, B00000};
  const byte thumb4[8] PROGMEM = {B00000, B11110, B01000, B10001, B10010, B10010, B01100, B00000};
  const byte thumb5[8] PROGMEM = {B00000, B10000, B01110, B00010, B00010, B00010, B00010, B00010};
  const byte thumb6[8] PROGMEM = {B00110, B01000, B10000, B00000, B00000, B00000, B00000, B00000};
  lcd.createChar(0, thumb1);
  lcd.createChar(1, thumb2);
  lcd.createChar(2, thumb3);
  lcd.createChar(3, thumb4);
  lcd.createChar(4, thumb5);
  lcd.createChar(5, thumb6);
  lcd.setCursor(4, 0);
  lcd.write(0);
  lcd.setCursor(4, 1);
  lcd.write(1);
  lcd.setCursor(5, 0);
  lcd.write(2);
  lcd.setCursor(5, 1);
  lcd.write(3);
  lcd.setCursor(6, 0);
  lcd.write(4);
  lcd.setCursor(6, 1);
  lcd.write(5);
}
void lcd_percentage(int percentage, int cursor_x, int cursor_x_end, int cursor_y) {

  int calc = (percentage * cursor_x_end * 5 / 100) - (percentage * cursor_x * 5 / 100);
  while (calc >= 5) {
    lcd.setCursor(cursor_x, cursor_y);
    lcd.write((byte)4);
    calc -= 5;
    cursor_x++;
  }
  while (calc >= 4 && calc < 5) {
    lcd.setCursor(cursor_x, cursor_y);
    lcd.write((byte)3);
    calc -= 4;

  }
  while (calc >= 3 && calc < 4) {
    lcd.setCursor(cursor_x, cursor_y);
    lcd.write((byte)2);
    calc -= 3;
  }
  while (calc >= 2 && calc < 3) {
    lcd.setCursor(cursor_x, cursor_y);
    lcd.write((byte)1);
    calc -= 2;
  }
  while (calc >= 1 && calc < 2) {
    lcd.setCursor(cursor_x, cursor_y);
    lcd.write((byte)0);
    calc -= 1;
  }

}

const byte percentage_1[8] PROGMEM = { B10000, B10000, B10000, B10000, B10000, B10000, B10000, B10000 };
const byte percentage_2[8] PROGMEM = { B11000, B11000, B11000, B11000, B11000, B11000, B11000, B11000 };
const byte percentage_3[8] PROGMEM = { B11100, B11100, B11100, B11100, B11100, B11100, B11100, B11100 };
const byte percentage_4[8] PROGMEM = { B11110, B11110, B11110, B11110, B11110, B11110, B11110, B11110 };
const byte percentage_5[8] PROGMEM = { B11111, B11111, B11111, B11111, B11111, B11111, B11111, B11111 };


int speaker = 2;
int count_right = 0 ; // Keep track of correct code count inputted
int data_out    = 12; // Digital Pin 12 = Data Out to Main Room Controller [ Outside of room by toy shop ]

void setup()
{
  R2D2();
  randomSeed(analogRead(0));
  pinMode(data_out, OUTPUT);
  digitalWrite(data_out, HIGH);
  Serial.begin(9600);
  pinMode(2, OUTPUT);
  randomSeed(analogRead(0));
  Serial.println(F("Init LCD"));
  lcd.init();                      // initialize the lcd
  lcd.backlight();
  Serial.println(F("Init color sensor"));
  if (tcs.begin()) {
    Serial.println(F("Found sensor"));
  } else {
    Serial.println(F("No TCS34725 found ... check your connections"));
  }

  lcd.print("Warming Up...");

  lcd.createChar(0, percentage_1);
  lcd.createChar(1, percentage_2);
  lcd.createChar(2, percentage_3);
  lcd.createChar(3, percentage_4);
  lcd.createChar(4, percentage_5);

  lcd.begin(16, 2);
  for (int i = 0; i <= 100; i++) {
    lcd.setCursor(0, 0);
    lcd.print("Loading :");
    lcd.print(i);
    lcd.print("%");
    lcd_percentage(i, 0, 16, 1);
    delay(10);
  }

  lcd.clear();
  lcd.cursor();
  lcd.blink();
  lcd.print(F("COMPUTER "));
  voice.say(spCOMPUTER);
  delay(100);
  lcd.print(F("CONNECTED"));
  voice.say(spCONNECTED);
  delay(300);
  lcd.clear();
  lcd.print(F("READY TO START?"));
  voice.say(spREADY_TO_START);
  delay(200);
  lcd.clear();
  lcd.print(F("TO "));
  voice.say(spTO);
  delay(200);
  lcd.print(F("ENTER "));
  voice.say(spENTER);
  delay(200);
  lcd.clear();
  lcd.print(F("PLEASE "));
  voice.say(spPLEASE);
  delay(200);
  lcd.print(F("INPUT"));
  voice.say(spIN);
  voice.say(spPUT);
  lcd.clear();
  delay(200);
  lcd.print(F("CORRECT"));
  voice.say(spCORRECT);
  delay(200);
  lcd.clear();
  lcd.print(F("COLORED POWER UNITS"));
  voice.say(spCOLOR);
  voice.say(sp_ED);
  delay(200);
  voice.say(spPOWER);

  delay(200);
  voice.say(spUNIT);
  voice.say(sp_S);
  lcd.noCursor();
}

//String colorMatrix [5][5] = {{"Blue","Yellow","Green","Red","Purple"},{"Green","Purple","Blue","Yellow","Red"},{"Blue","Green","Red","Yellow","Purple"},{"Red","Blue","Green","Purple","Yellow"},{"Yellow","Purple","Red","Green","Blue"}};
const String answers[5] PROGMEM = {"Yellow", "Purple", "Green", "Red", "Blue"};
void loop()
{
  uint16_t r, g, b, c, colorTemp, lux;

  tcs.getRawData(&r, &g, &b, &c);
  colorTemp = tcs.calculateColorTemperature(r, g, b);
  lux = tcs.calculateLux(r, g, b);

  Serial.print("Color Temp: "); Serial.print(colorTemp, DEC); Serial.print(" K - ");
  Serial.print("Lux: "); Serial.print(lux, DEC); Serial.print(" - ");
  Serial.print("R: "); Serial.print(r, DEC); Serial.print(" ");
  Serial.print("G: "); Serial.print(g, DEC); Serial.print(" ");
  Serial.print("B: "); Serial.print(b, DEC); Serial.print(" ");
  Serial.print("C: "); Serial.print(c, DEC); Serial.print(" ");
  Serial.println(" ");
  int puzzle = 0;
  while (puzzle < 5) {

    boolean working = true;
    String answer = answers[puzzle];
    Serial.println(F("NOW WORKING"));
    lcd.clear();
    lcd.print(F("PLACE BALLS HERE"));

    while (working) {

      tcs.getRawData(&r, &g, &b, &c);
      colorTemp = tcs.calculateColorTemperature(r, g, b);
      lux = tcs.calculateLux(r, g, b);

      Serial.print("Color Temp: "); Serial.print(colorTemp, DEC); Serial.print(" K - ");
      Serial.print("Lux: "); Serial.print(lux, DEC); Serial.print(" - ");
      Serial.print("R: "); Serial.print(r, DEC); Serial.print(" ");
      Serial.print("G: "); Serial.print(g, DEC); Serial.print(" ");
      Serial.print("B: "); Serial.print(b, DEC); Serial.print(" ");
      Serial.print("C: "); Serial.print(c, DEC); Serial.print(" ");
      Serial.println(" ");
      double dr = r;
      double dg = g;
      double db = b;
      double dc = c;
      int type = 0;
      if (r > 1000 && g > 1000 && b > 1000) {
        Serial.println(F("I SEE SOMETHING!"));
        boolean got = false;

        if (dr > db + dg && !got) {
          color = ("Red");
          Serial.println("IT'S " + color);
          got = true;
          type = 1;
        }

        if (db > dg + dr && !got) {
          color = ("Blue");
          Serial.println("IT'S " + color);
          got = true;
          type = 2;
        }



        if ((dr + dg) / dc > 0.80 && !got && colorTemp < 3500) {
          color = ("Yellow");
          Serial.println("IT'S " + color);
          got = true;
          type = 3;

        }
        if ((dr + db) / dc > 0.65 && !got) {
          color = ("Purple");
          Serial.println("IT'S " + color);
          got = true;
          type = 4;
        }
        if (dg / dc > 0.4 && !got && colorTemp > 3500) {

          color = ("Green");
          Serial.println("IT'S " + color);
          got = true;
          type = 5;

        }



      }

      if (color.equalsIgnoreCase(answer)) {
        puzzle--;
        lcd.clear();
        thumbsup();
        working = false;
        tone(speaker, 1000, 200);
        delay(200);
        tone(speaker, 1500, 200);
        delay(200);
        tone(speaker, 2500, 200);
        delay(5000);

        switch (type) {

          case 1:
            voice.say(spN);
            delay(200);
            voice.say(spT);
            break;
          case 2:
            voice.say(spE);
            delay(200);
            voice.say(spR);
            break;
          case 3:
            voice.say(spD);
            delay(200);
            voice.say(spO);
            break;
          case 4:
            voice.say(spN);
            delay(200);
            voice.say(spO);
            break;
          case 5:
            voice.say(spT);
            delay(200);
            voice.say(spE);
            break;
        }

      } else {

        lcd.clear();

        lcd.print(F("NEED MORE MATERIALS"));
        if (random(1, 10) > 4) {
          voice.say(spI);
          delay(100);
          voice.say(spNEED);
          delay(100);
          voice.say(spMORE);
          delay(100);
          voice.say(spPOWER);
          delay(100);
          voice.say(spUNIT);
          voice.say(sp_S);
        } else {
          voice.say(spPLEASE);
          delay(200);
          voice.say(spGIVE);
          delay(200);
          voice.say(spMACHINE);
          delay(200);
          voice.say(spMORE);
          delay(200);
          voice.say(spPOWER);
          delay(200);
          voice.say(spUNIT);
          voice.say(sp_S);
        }
        delay(1000);


      }
    }
    lcd.clear();
    lcd.print(F("COLOR MATRIX HACKED!"));
    Serial.println(F("HACKED"));
    delay(1000);
    digitalWrite(data_out, LOW); // Main controller looking for zero / low

  }

}

